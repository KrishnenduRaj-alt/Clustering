# -*- coding: utf-8 -*-
"""KMeans.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DUicYD35UNmL3XrW9LKZildJWBoRPbPe
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def load_data(file_path="dataset"):
    """
    Considering the first column containing labels, it loads the dataset and converts it to a NumPy array.
    Parameters include file path of the dataset.
    Returns numerical values of the dataset which is a Numpy array.
    """
    try:
        df = pd.read_csv(file_path, header=None, delim_whitespace=True)
        return df.iloc[:, 1:].astype(float).to_numpy()  # Exclude labels, convert to NumPy array
    except Exception as e:
        print(f"Error loading dataset: {e}")
        exit(1)

def ComputeDistance(point1, point2):
    """
    For computing the Euclidean distance between two points.

    Parameters are :
        1.point1 (np.ndarray), which is the first point.
        2.point2 (np.ndarray), which is the second point.

    Returns the Euclidean distance between the given points as float.
    """
    return np.linalg.norm(point1 - point2)

def initialSelection(data, k):
    """
    For random selection of k initial cluster representatives from the dataset.

    Parameters include:
        1. The dataset containing data points [np.ndarray].
        2. The number of clusters i.e,k [int]


    Returns the initial cluster centroids[np.ndarray].
    """
    np.random.seed(42)  # Ensures reproducibility
    return data[np.random.choice(len(data), k, replace=False)]

def assign_clusters(data, centroids):
    """
    To assign each data point to the nearest centroid.

    Parameters include:
        1. The dataset containing data points [data (np.ndarray)].
        2. The current cluster centroids [centroids (np.ndarray)].

    Returns an array of cluster assignments for each data point [np.ndarray].
    """
    cluster_labels = np.zeros(len(data), dtype=int)
    for i, point in enumerate(data):
        distances = [ComputeDistance(point, center) for center in centroids]
        cluster_labels[i] = np.argmin(distances)  # Assign to the nearest centroid
    return cluster_labels

def update_centroids(data, cluster_labels, k):
    """
    Computes new cluster centroids as the mean of assigned points.
    If a cluster has no points, assigns a random data point as its centroid.

    Parameters:
        1. The dataset containing data points [data (np.ndarray].
        2. The cluster assignments for each data point [ cluster_labels (np.ndarray)].
        3. The number of clusters [k (int)].

    Returns the updated cluster centroids [np.ndarray].
    """
    new_centroids = np.zeros((k, data.shape[1]))
    for i in range(k):
        cluster_points = data[cluster_labels == i]
        if len(cluster_points) > 0:
            new_centroids[i] = np.mean(cluster_points, axis=0)
        else:
            new_centroids[i] = data[np.random.randint(0, len(data))]  # Reinitialize if empty
    return new_centroids

def clustername(x, k, max_iters=100, tolerance=1e-4):
    """
    Implements the K-Means clustering algorithm.

    Parameters include:
        1. The dataset containing data points [x (np.ndarray)].
        2. The number of clusters [k (int)].
        3. The maximum number of iterations for convergence. Default is 100 [max_iters (int, optional)].
        4. The threshold for centroid movement to determine convergence. Default is 1e-4 [tolerance (float, optional)].

    Returns a tuple containing:
            - The final cluster centroids (np.ndarray).
            - An array of cluster assignments for each data point (np.ndarray).
    """
    centroids = initialSelection(x, k)
    for _ in range(max_iters):
        cluster_labels = assign_clusters(x, centroids)
        new_centroids = update_centroids(x, cluster_labels, k)
        if np.linalg.norm(new_centroids - centroids) < tolerance:
            break  # Stop if centroids do not change significantly
        centroids = new_centroids
    return centroids, cluster_labels

def silhouette_score(data, cluster_labels, k):
    """
    Computes the Silhouette coefficient for each cluster.

    Parameters include:
        1. The dataset containing data points [data (np.ndarray)].
        2. An array of cluster assignments for each data point [cluster_labels (np.ndarray)]
        3. The number of clusters [k (int)].


    Returns the average Silhouette coefficient for the entire dataset (float).
    """
    if k == 1:
        return 0  # Not defined for a single cluster

    scores = []
    for i in range(len(data)):
        same_cluster = data[cluster_labels == cluster_labels[i]]
        other_clusters = [data[cluster_labels == j] for j in range(k) if j != cluster_labels[i] and len(data[cluster_labels == j]) > 0]

        # Compute intra-cluster distance (a)
        a = np.mean([ComputeDistance(data[i], p) for p in same_cluster if not np.array_equal(p, data[i])]) if len(same_cluster) > 1 else 0
        # Compute nearest-cluster distance (b)
        b = min([np.mean([ComputeDistance(data[i], p) for p in cluster]) for cluster in other_clusters]) if other_clusters else 0

        # Compute Silhouette score for point i
        scores.append((b - a) / max(a, b) if max(a, b) > 0 else 0)

    return np.mean(scores)  # Average over all points

def plotSilhouttee(data):
    """
    Computes and plots the Silhouette coefficient for k values ranging from 1 to 9.

    Parameters include the dataset containing data points [data (np.ndarray)].

    Returns None. Displays and saves the plot.
    """
    k_values = range(1, 10)
    scores = [silhouette_score(data, clustername(data, k)[1], k) for k in k_values]

    plt.figure(figsize=(8, 5))
    plt.plot(k_values, scores, marker='o', linestyle='-', label="Silhouette Score")
    plt.xlabel("Number of Clusters (k)")
    plt.ylabel("Silhouette Coefficient")
    plt.title("Silhouette Score vs. Number of Clusters")
    plt.legend()
    plt.grid()
    plt.savefig("silhouette_plot.png")  # Save the figure
    plt.show()

if __name__ == "__main__":
    dataset = load_data()
    plotSilhouttee(dataset)